using System;

namespace ProjectEuler
{
    class Program
    {
        static void Main(string[] args)
        {
            #region Problem 1
            /*             problem 1                  //
            int sum = 0;
            for (int i = 0; i < 1000; i++)
            {
                if (i % 3 == 0 || i % 5 == 0)
                {
                    sum += i;
                }
            }

            Console.WriteLine(sum);*/
            #endregion Problem 1
            #region Problem 2
            /*Each new term in the Fibonacci sequence is generated by adding the previous 
             * two terms. By starting with 1 and 2, the first 10 terms will be:
             *              
             *              1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
             *
             * By considering the terms in the Fibonacci sequence whose values do not exceed 
             * four million, find the sum of the even-valued terms.*/

            int sum = 2; // Used to store the sum of even numbers
            int currentNum = 3; // stores the most current number
            int secondNum = 2; // stores the previous number in the sequence
            int temp; // temp int for swapping values

            while (currentNum < 4000000)
            {
                temp = currentNum;//currentNum is temporarly stored in temp to be later put into secondNum
                currentNum = currentNum + secondNum;//currentNum equals the sum of last two numbers
                secondNum = temp;//secondNum is assigned what the 

                if (currentNum % 2 == 0)
                {
                    sum += currentNum;
                }
            }

            Console.WriteLine(sum);
            #endregion Problem 2
            #region Problem 3
            /* The prime factors of 13195 are 5, 7, 13 and 29.

            What is the largest prime factor of the number 600851475143? */

            /*bool solved = false;

            for(int i = 0; !solved; i++)
            {
                
            }*/

            #endregion Problem 3
        }
    }
}
